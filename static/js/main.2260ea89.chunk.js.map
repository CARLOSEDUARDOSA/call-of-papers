{"version":3,"sources":["assets/logo.jpeg","Routes.js","utils/currentDate.js","pages/Login/FBLogin.js","components/Menu/index.js","App.js","serviceWorker.js","index.js","utils/environment.js"],"names":["module","exports","Home","React","lazy","Event","EventsList","EventForm","Lecture","LecturesList","LectureForm","MyProfile","ProfileForm","About","SubmissionsList","Submission","DownloadLectures","Routes","props","fallback","exact","path","component","routerProps","getCurrentDate","separator","newDate","Date","date","getDate","month","getMonth","year","getFullYear","FBLogin","history","useHistory","environment","getEnvironment","useState","fbContent","setFbContent","responseFacebook","response","localStorage","setItem","userID","picture","data","url","name","email","push","fetch","then","res","json","find","profile","id","getItem","newProfile","Object","localization","registerDate","apresentation","githubLink","linkedinLink","twitterLink","facebookLink","mediumLink","interests","method","headers","Accept","body","JSON","stringify","console","log","catch","err","error","useEffect","appId","autoLoad","fields","callback","style","float","SubMenu","Menu","HeaderComponent","userPicture","to","src","require","alt","className","theme","mode","selectedKeys","location","pathname","Item","key","onClick","CalendarOutlined","BookOutlined","title","removeItem","Header","Layout","Footer","Content","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2260ea89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.942afd57.jpeg\";","import React, { Suspense } from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nconst Home = React.lazy(() => import('pages/Home/Home'))\r\nconst Event = React.lazy(() => import('pages/Events/Event'))\r\nconst EventsList = React.lazy(() => import('pages/Events/EventsList'))\r\nconst EventForm = React.lazy(() => import('pages/Events/EventForm'))\r\nconst Lecture = React.lazy(() => import('pages/Lectures/Lecture'))\r\nconst LecturesList = React.lazy(() => import('pages/Lectures/LecturesList'))\r\nconst LectureForm = React.lazy(() => import('pages/Lectures/LectureForm'))\r\nconst MyProfile = React.lazy(() => import('pages/Profile/MyProfile'))\r\nconst ProfileForm = React.lazy(() => import('pages/Profile/ProfileForm'))\r\nconst About = React.lazy(() => import('pages/About'))\r\nconst SubmissionsList = React.lazy(() => import('pages/Submissions/submissionsList'))\r\nconst Submission = React.lazy(() => import('pages/Submissions/submission'))\r\nconst DownloadLectures = React.lazy(() => import('pages/Lectures/LecturesCSV'))\r\n\r\nconst Routes = props => (\r\n  <Suspense fallback=\"Loading...\" >\r\n    <Switch>\r\n      <Route exact path=\"/\" component={routerProps => <Home {...routerProps} />} />\r\n\r\n      <Route exact path=\"/about\" component={routerProps => <About {...routerProps} />} />\r\n\r\n      <Route exact path=\"/events\" component={routerProps => <EventsList {...routerProps} />} />\r\n      <Route exact path=\"/events/form\" component={routerProps => <EventForm {...routerProps} />} />\r\n      <Route exact path=\"/events/form/:eventId\" component={routerProps => <EventForm {...routerProps} />} />\r\n      <Route path=\"/events/:eventId\" component={routerProps => <Event {...routerProps} />} />\r\n\r\n      <Route exact path=\"/submissions\" component={routerProps => <SubmissionsList {...routerProps} />} />\r\n      <Route exact path=\"/submissions/:submissionId\" component={routerProps => <Submission {...routerProps} />} />\r\n\r\n      <Route exact path=\"/lectures\" component={routerProps => <LecturesList {...routerProps} />} />\r\n      <Route exact path=\"/download-lectures\" component={routerProps => <DownloadLectures {...routerProps} />} />\r\n      <Route exact path=\"/lectures/form\" component={routerProps => <LectureForm {...routerProps} />} />\r\n      <Route path=\"/lectures/:lectureId\" component={routerProps => <Lecture {...routerProps} />} />\r\n      \r\n      <Route path=\"/profile/\" component={routerProps => <MyProfile {...routerProps} />} />\r\n      <Route path=\"/profileForm\" component={routerProps => <ProfileForm {...routerProps} />} />\r\n    </Switch>\r\n  </Suspense>\r\n)\r\n\r\nexport default Routes\r\n","export function getCurrentDate(separator='-'){\r\n\r\n    let newDate = new Date()\r\n    let date = newDate.getDate();\r\n    let month = newDate.getMonth() + 1;\r\n    let year = newDate.getFullYear();\r\n    \r\n    return `${year}${separator}${month<10?`0${month}`:`${month}`}${separator}${date}`\r\n    }","import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport FacebookLogin from 'react-facebook-login'\r\nimport { getCurrentDate } from './../../utils/currentDate'\r\nimport { getEnvironment } from './../../utils/environment'\r\nimport './fb_style.scss'\r\n\r\nconst FBLogin = () => {\r\n\tlet history = useHistory()\r\n\tconst environment = getEnvironment()\r\n\tconst [ fbContent, setFbContent ] = useState('')\r\n\r\n\tconst responseFacebook = (response) => {\r\n\t\t// Armazena os dados do usuário no navegador. Quando houver logout eles serão apagados\r\n\t\tlocalStorage.setItem('userId', response.userID)\r\n\t\tlocalStorage.setItem('userPicture', response.picture.data.url)\r\n\t\tlocalStorage.setItem('userName', response.name)\r\n\t\tlocalStorage.setItem('userEmail', response.email)\r\n\r\n\t\t// Redireciona para a página inicial\r\n\t\thistory.push('/')\r\n\r\n\t\t// Verifica se é um novo usuário ou não. Se for, adiciona no json de usuários\r\n\t\tfetch(`${environment}/profiles`)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tif (!data.find((profile) => profile.id === localStorage.getItem('userId'))) {\r\n\t\t\t\t\tlet newProfile = new Object({\r\n\t\t\t\t\t\tid: response.userID,\r\n\t\t\t\t\t\temail: response.email? response.email : '',\r\n\t\t\t\t\t\tlocalization: '',\r\n\t\t\t\t\t\tregisterDate: `${getCurrentDate()}`,\r\n\t\t\t\t\t\tapresentation: '',\r\n\t\t\t\t\t\tgithubLink: '',\r\n\t\t\t\t\t\tlinkedinLink: '',\r\n\t\t\t\t\t\ttwitterLink: '',\r\n\t\t\t\t\t\tfacebookLink: '',\r\n\t\t\t\t\t\tmediumLink: '',\r\n\t\t\t\t\t\tinterests: []\r\n\t\t\t\t\t})\r\n\t\t\t\t\tfetch(`${environment}/profiles`, {\r\n\t\t\t\t\t\tmethod: 'post',\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbody: JSON.stringify(newProfile)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(function(response) {\r\n\t\t\t\t\t\t\tconsole.log(response)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch((err) => console.error(err, 'Não foi possível criar usuário'))\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.error(err, 'Nenhum usuário encontrado'))\r\n\t}\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// Lógica para o botão de login do facebook aparecer ou não na tela\r\n\t\t\t// Toda vez que o id de usuário armazenado na sessão mudar, ele vai executar isso\r\n\r\n\t\t\tif (!localStorage.getItem('userId')) {\r\n\t\t\t\tsetFbContent(\r\n\t\t\t\t\t<FacebookLogin\r\n\t\t\t\t\t\tappId=\"675476209915681\"\r\n\t\t\t\t\t\tautoLoad={true}\r\n\t\t\t\t\t\tfields=\"name,email,picture\"\r\n\t\t\t\t\t\tcallback={responseFacebook}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\tsetFbContent('')\r\n\t\t\t}\r\n\t\t},\r\n\t\t[ localStorage.getItem('userId') ]\r\n\t)\r\n\r\n\treturn <div style={{ float: 'right' }}>{fbContent}</div>\r\n}\r\n\r\nexport default FBLogin\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Menu, Avatar } from 'antd'\r\nimport { CalendarOutlined, BookOutlined } from '@ant-design/icons'\r\nimport FBLogin from '../../pages/Login/FBLogin'\r\nimport './style.scss'\r\n\r\nconst { SubMenu } = Menu\r\n\r\nconst HeaderComponent = () => {\r\n  const history = useHistory()\r\n  const userPicture = localStorage.getItem('userPicture');\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('userId')\r\n    localStorage.removeItem('userPicture')\r\n    localStorage.removeItem('userName')\r\n    localStorage.removeItem('userEmail')\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Link to='/'>\r\n        <img src={require('../../assets/logo.jpeg')} alt='Call for Papers' className='logo' />\r\n      </Link>\r\n      {\r\n        !localStorage.getItem('userId') ?\r\n          (<FBLogin />)\r\n            :\r\n          (<Menu theme='light' mode='horizontal' selectedKeys={[history.location.pathname]}>\r\n            <Menu.Item key='/events' onClick={() => history.push('/events')}>\r\n              <CalendarOutlined />\r\n              Meus eventos\r\n            </Menu.Item>\r\n            <Menu.Item key='/lectures' onClick={() => history.push('/lectures')}>\r\n              <BookOutlined />\r\n              Minhas palestras\r\n            </Menu.Item>\r\n            <SubMenu title={<Avatar src={userPicture} />}>\r\n              <Menu.Item key='/profile' onClick={() => history.push('/profile')}>\r\n                Meu perfil\r\n              </Menu.Item>\r\n              <Menu.Item key='logout' onClick={() => logout()}>\r\n                Sair\r\n              </Menu.Item>\r\n            </SubMenu>\r\n          </Menu>)\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HeaderComponent\r\n","import React from 'react'\r\nimport Routes from './Routes'\r\nimport { Layout } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport Menu from './components/Menu'\r\nimport 'antd/dist/antd.css'\r\nimport './index.scss'\r\n\r\nconst { Header, Footer, Content } = Layout\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<Header>\r\n\t\t\t\t<Menu />\r\n\t\t\t</Header>\r\n\r\n\t\t\t<Content>\r\n\t\t\t\t<Routes />\r\n\t\t\t</Content>\r\n\r\n\t\t\t<Footer>\r\n        <Link to=\"/about\">About <i>Call for Papers</i></Link>\r\n        © Copyright Call For Papers 2020\r\n\t\t\t</Footer>\r\n\t\t</Layout>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from 'react'\r\nimport { HashRouter } from 'react-router-dom'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.scss'\r\nimport './ant_overrides.scss'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={null}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </Suspense>,\r\ndocument.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n","export function getEnvironment(){\r\n\r\n        return 'http://localhost:3001'\r\n    \r\n}"],"sourceRoot":""}